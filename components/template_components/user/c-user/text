"use client";

import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { useEffect, useState } from "react";
import formFields from "@/public/form.json";
import Title from "@/share/header_route/title";
import { IoClose } from "react-icons/io5";
import { AnimatePresence, motion } from "framer-motion";
import { useTranslation } from "react-i18next";
import { HiEye } from "react-icons/hi";
import { PiEyeClosedBold } from "react-icons/pi";
import { useUserStore } from "@/store/userStore";
import toast from "react-hot-toast";
interface CreateUserModalProps {
  isOpen: boolean;
  onClose: () => void;
}
export function CreateUser({ isOpen, onClose }: CreateUserModalProps) {
  const { t } = useTranslation("translation");
  const [showPassword, setShowPassword] = useState(false);
  const [confirmPassword, setConfirmPassword] = useState(false)
  const fields = formFields.createUser;
  const initialState: Record<string, string> = {};
  fields.forEach((form: { name: string; value?: string }) => {
    initialState[form.name] = form.value || "";
  });
  const [formData, setFormData] = useState<Record<string, string>>(initialState);
  const { createUser } = useUserStore();
  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    setFormData(prev => ({ ...prev, [name]: value }));
  };

  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    console.log(formData);

    try {
      await createUser(formData);
      setFormData(initialState);
      onClose();
      // if (getUsers) {
      //   await getUsers();
      // }
      toast.success("User created successfully");
    } catch (err) {
      console.error("❌ Failed to create user:", err);
      toast.error("Failed to create user");
    } finally {
      setFormData(initialState);
    }
  };


  if (!isOpen) return null;

  useEffect(() => {
    if (isOpen) {
      document.body.style.overflow = "hidden";
    } else {
      document.body.style.overflow = "auto";
    }
    return () => {
      document.body.style.overflow = "auto";
    };
  }, [isOpen]);

  const [image, setImage] = useState<string | null>(null);

  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (!file) return;

    // Preview the image
    const reader = new FileReader();
    reader.onload = () => {
      setImage(reader.result as string);
    };
    reader.readAsDataURL(file);
  };

  return (
    <div>
      {isOpen && (
        <AnimatePresence>
          <motion.div
            className="fixed inset-0 z-[1111] flex items-center justify-center bg-black bg-opacity-50 p-52"
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
          >
            <motion.div
              initial={{ scale: 0.9 }}
              animate={{ scale: 1 }}
              exit={{ scale: 0.9 }}
              transition={{ duration: 0.2 }}
            >
              <form
                onSubmit={handleSubmit}
                className="bg-white w-[700px] max-w-full rounded-2xl max-h-[90vh] overflow-y-auto shadow-lg"
              >
                {/* Sticky Header */}
                <div className="flex justify-between items-center sticky top-0 bg-white px-4 p-3 z-10">
                  <Title title="create_user" />
                  <div
                    onClick={onClose}
                    className="bg-gray-100 p-1 rounded-full cursor-pointer hover:bg-gray-200 transition"
                  >
                    <IoClose className="text-[18px]" />
                  </div>
                </div>
                <div className="grid md:grid-cols-2 gap-4 p-4">
                  {fields.map((form, index) =>
                    form.type === "input" ? (
                      <div key={`${form.name}-${index}`}>
                        <Label htmlFor={form.name}>{t(form.label)}</Label>
                        <Input
                          className="mt-2"
                          type="text"
                          id={form.name}
                          placeholder={t(form.placeholder || form.label)}
                          name={form.name}
                          value={t(formData[form.name] ?? "")}
                          required={form.required}
                          disabled={form.disabled}
                          onChange={handleChange}
                        />
                      </div>
                    ) : form.type === 'password' ? (
                      <div key={`${form.name}-${index}`} className="relative">
                        <Label htmlFor={form.name}>{t(form.name)}</Label>
                        <div className="relative">
                          <Input
                            name={form.name}
                            type={showPassword ? "text" : "password"}
                            value={t(formData[form.name] ?? "")}
                            onChange={handleChange}
                            id="password"
                            placeholder={t(form.placeholder || form.label)}
                            className="pr-10 mt-2"
                          />
                          <button
                            type="button"
                            onClick={() => setShowPassword(!showPassword)}
                            className="absolute right-2 top-1/2 transform -translate-y-1/2 text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200"
                          >
                            {showPassword ? <HiEye size={20} /> : <PiEyeClosedBold size={20} />}
                          </button>
                        </div>
                      </div>
                    ) : form.type === 'confirmpassword' ? (
                      <div key={`${form.name}-${index}`} className=" relative">
                        <Label htmlFor={form.name}>{t(form.name)}</Label>
                        <div className="relative">
                          <Input
                            name={form.name}
                            type={confirmPassword ? "text" : "password"}
                            value={t(formData[form.name] ?? "")}
                            onChange={handleChange}
                            id="password"
                            placeholder={t(form.placeholder || form.label)}
                            className="pr-10 mt-2"
                          />
                          <button
                            type="button"
                            onClick={() => setConfirmPassword(!confirmPassword)}
                            className="absolute right-2 top-1/2 transform -translate-y-1/2 text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200"
                          >
                            {confirmPassword ? <HiEye size={20} /> : <PiEyeClosedBold size={20} />}
                          </button>
                        </div>
                      </div>
                    ) : null)}
                </div>
                <div className="w-full px-4">
                  <Label htmlFor="picture">{t('image')}</Label>
                  <label
                    htmlFor="picture"
                    className="mt-2 flex flex-col items-center justify-center w-full h-48 border-2 border-dashed rounded-md cursor-pointer hover:bg-gray-50 transition"
                  >
                    {image ? (
                      <img
                        src={image}
                        alt="Preview"
                        className="w-[200px] p-5 h-[200px]  rounded-md"
                      />
                    ) : (
                      <span className="text-gray-500 text-sm">{t('click_to_uploade_image')}</span>
                    )}
                  </label>

                  <input
                    id="picture"
                    type="file"
                    accept="image/*"
                    className="hidden"
                    onChange={handleFileChange}
                  />
                </div>
                <div className="flex justify-end mt-5 px-4 mb-4">
                  <button
                    type="submit"
                    className="px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition"
                  >
                    {t('save')}
                  </button>
                </div>
              </form>
            </motion.div>
          </motion.div>
        </AnimatePresence>
      )}
    </div>
  );
}
